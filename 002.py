#!/usr/bin/env python
"""Even Fibonacci numbers
Problem 2
Published on 19 October 2001 at 06:00 pm [Server Time]
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

import sys
if (2,7) > sys.version_info or (3,0) <= sys.version_info:
    import warnings
    warnings.warn("Code intended for Python 2.7.x")

maxFib = 4000000

#----------------
#Trivial solution
#----------------
#from common.fibonacci import fib
#import itertools as it
#result = sum([x for x in it.takewhile(lambda y: y < maxFib, fib()) if x&1 == 0])


#--------------------
#Alternative solution
#--------------------
# We can see that even numbers come every 3 numbers after the first one, so we
# don't have to check them to see if they are even or odd.
#from common.fibonacci import fib
#import itertools as it
#result = sum(it.islice(it.takewhile(lambda x: x < maxFib, fib()), 2, None, 3))

#---------------
#Better solution: In place and faster
#---------------
# We can see that given 2 consecutive even numbers (E0 & E1) the next even
# number E2 is E0 + 4 x E1
# Multiplication by 4 is replaced with a faster shift to the left

result=0
f0, f1 = 0, 2
while f1 < maxFib:
    result += f1
    f0, f1 = f1, (f1<<2) + f0

print "\n", __doc__
print "The sum of even numbers from the Fibonnaci sequence whose values do not exceed {0} is {1}".format(maxFib,result)
